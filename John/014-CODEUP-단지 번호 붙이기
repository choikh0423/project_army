문제 설명(https://codeup.kr/problem.php?id=4421)
<그림 1>과 같이 정사각형 모양의 지도가 있다. 1은 집이 있는 곳을, 0은 집이 없는 곳을 나타낸다. 철수는 이 지도를 가지고 연결된 집들의 모임인 단지를 정의하고, 단지에 번호를 붙이려 한다. 여기서 연결되었다는 것은 어떤 집이 좌우, 혹은 아래위로 다른 집이 있는 경우를 말한다. 대각선상에 집이 있는 경우는 연결된 것이 아니다. <그림 2>는 <그림 1>을 단지별로 번호를 붙인 것이다. 지도를 입력하여 단지수를 출력하고, 각 단지에 속하는 집의 수를 오름차순으로 정렬하여 출력하는 프로그램을 작성하시오.

입력
첫 번째 줄에는 지도의 크기 N(정사각형으므로 가로와 세로의 크기는 같으며 5≤N≤25)이 입력되고,
그 다음 N줄에는 각각 N개의 자료(0혹은 1)가 입력된다.

출력
첫 번째 줄에는 총 단지수를 출력하시오. 그리고 각 단지내 집의 수를 오름차순으로 정렬하여 한 줄에 하나씩 출력하시오.

입력 예시   
7
0110100
0110101
1110101
0000111
0100000
0111110
0111000

출력 예시
3
7
8
9

#start_time : 2021.03.29
#end_time : 2021.03.30

#배운점
//성공했고 근무 들어가야되서 내일후기작성!

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#내코드
#include <stdio.h>
#include <stdlib.h>

char **map; //키보드버퍼없이 바로입력받는 get_s 를 여기선쓸수없으므로 캐릭터형으로 받아준다.
int **visited;
int N;
int dy[4]={1,-1,0,0};
int dx[4]={0,0,1,-1};
int cnt=0;

typedef struct Node{
    int cnt;
    struct Node *next;
}Node;

typedef struct List{
    Node *h;
    int total;
}List;

List* creat_List(){
    List *H=(List*)malloc(sizeof(List));
    H->total=0;
    H->h=NULL;
    return H;
}
void input_List(List *H,int a){
    H->total++;
    Node *newNode=(Node*)malloc(sizeof(Node));
    newNode->cnt=a;
    newNode->next=NULL;
    if(H->h==NULL){
        H->h=newNode;
        return;
    }
    if(newNode->cnt < H->h->cnt){
        newNode->next=H->h;
        H->h=newNode;
        return;
    }
    Node *p;
    p=H->h;
    while(p->next!=NULL){
        if(newNode->cnt < p->next->cnt){
            break;
        }
        p=p->next;
    }
    if(p->next==NULL){
        p->next=newNode;
        return;
    }
    else{
        newNode->next=p->next;
        p->next=newNode;
        return;
    }
}

void search_adj(int y,int x){
    //printf("%d %d 방문\n",y,x);
    if(map[y][x]=='0' || visited[y][x]==1)return;
    visited[y][x]=1;
    cnt++;
    for(int i=0;i<4;i++){
        if((i==0 && y==N-1) || (i==1 && y==0) || (i==2 && x==N-1) ||(i==3 && x==0))continue;
        search_adj(y+dy[i],x+dx[i]);
    }
    return;
}

void print_Map(){
    printf("-----------------------------\n");
    printf("!지도를 출력합니다!\n");
    for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            printf("%c",map[i][j]);
        }
        printf("\n");
    }
    printf("-----------------------------\n");
}

void print_List(List *H){
    printf("%d\n",H->total);
    Node *horse;
    horse=H->h;
    while(horse){
        printf("%d\n",horse->cnt);
        horse=horse->next;
    }
    return;
}

int main(){
    List *H;
    H=creat_List();
    scanf("%d ",&N);
    map=(char **)malloc(sizeof(char*)*N); // map 이차원배열 동적할당
    for(int i=0;i<N;i++)map[i]=(char *)malloc(sizeof(char)*N);
    visited=(int **)malloc(sizeof(int*)*N); // visited 이차원배열 동적할당
    for(int i=0;i<N;i++)visited[i]=(int *)malloc(sizeof(int)*N);
    
    for(int i=0;i<N;i++){
            scanf("%s ",map[i]);
    }
   // print_Map();
    for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            if(map[i][j]!='0' && visited[i][j]==0){
                //printf("%d %d=%c갈거야\n",i,j,map[i][j]);
                search_adj(i,j);
            }
            if(cnt!=0)input_List(H,cnt);
            cnt=0;
        }
    }
    print_List(H);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#2021.03.29
//문제는 파악했고 공책에 끄적여보고오겠다.
#2021.03.30
//문제풀었고 시간없어서 내일 후기작ㄷ성!!
