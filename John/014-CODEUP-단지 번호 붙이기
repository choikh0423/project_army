문제 설명(https://codeup.kr/problem.php?id=4421)
<그림 1>과 같이 정사각형 모양의 지도가 있다. 1은 집이 있는 곳을, 0은 집이 없는 곳을 나타낸다. 철수는 이 지도를 가지고 연결된 집들의 모임인 단지를 정의하고, 단지에 번호를 붙이려 한다.
여기서 연결되었다는 것은 어떤 집이 좌우, 혹은 아래위로 다른 집이 있는 경우를 말한다. 대각선상에 집이 있는 경우는 연결된 것이 아니다. <그림 2>는 <그림 1>을 단지별로 번호를 붙인 것이다. 
지도를 입력하여 단지수를 출력하고, 각 단지에 속하는 집의 수를 오름차순으로 정렬하여 출력하는 프로그램을 작성하시오.

입력
첫 번째 줄에는 지도의 크기 N(정사각형으므로 가로와 세로의 크기는 같으며 5≤N≤25)이 입력되고,
그 다음 N줄에는 각각 N개의 자료(0혹은 1)가 입력된다.

출력
첫 번째 줄에는 총 단지수를 출력하시오. 그리고 각 단지내 집의 수를 오름차순으로 정렬하여 한 줄에 하나씩 출력하시오.

입력 예시   
7
0110100
0110101
1110101
0000111
0100000
0111110
0111000

출력 예시
3
7
8
9

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#start_time : 2021.03.29
#end_time : 2021.03.30

#배운점
//저번에 dfs와 bfs를 만들 때 bfs가 dfs보다 구현방법이 더 복잡하고 어렵다라고 들었지만 의외로 그래프에서 탐색할때는 bfs가 만들기 더 쉬웠다. 하지만
//이 문제같은 경우는 dfs로 구현했는데 bfs로 만들려니까 도저히 효율적인 방법이 떠오르지 않고 만든다해도 비효율적인 방법밖에 떠오르지 않는다.
//좌표체계에서의 4방향 이동방법에 대해서는 저번 12문제 풀때 해봐서 익숙했고 한번 더 몸에 익히는 시간을 가졌다.
//오류를 고치면서 생각한건데 어떤 함수를 실행할때 실행한다는 문장을 프린트해주면 좋은것같다.
//처음에 문제를 풀때 scanf로 [0][0]에 젤처음 숫자 들어가게 만들었다. 예상대로라면 map[0][0]에는 '0'이라는 숫자 한개만 들어가야했는데 보니까
//110110이 들어가있었다. 그이유는 각 숫자간에 스페이스바가 없었고 그 결과 110110이 들어갔다.
//이 문제점에 대한 해결책으로는 첫번째 줄 '0110110'을 '문자열' map[0]에 받아준다 그렇게되면 map[0][0]='0' map[0][1]='1'... 이런식으로 받아진다.
//이러한 해결책도 이전에 풀었던 문제가 없었다면 생각도 못했을 것이다. 점점 실력이 늘어간다는게 체감이된다.


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#내코드
#include <stdio.h>
#include <stdlib.h>

char **map; //키보드버퍼없이 바로입력받는 get_s 를 여기선쓸수없으므로 캐릭터형으로 받아준다.
int **visited;
int N;
int dy[4]={1,-1,0,0};
int dx[4]={0,0,1,-1};
int cnt=0;

typedef struct Node{
    int cnt;
    struct Node *next;
}Node;

typedef struct List{
    Node *h;
    int total;
}List;

List* creat_List(){
    List *H=(List*)malloc(sizeof(List));
    H->total=0;
    H->h=NULL;
    return H;
}
void input_List(List *H,int a){
    H->total++;
    Node *newNode=(Node*)malloc(sizeof(Node));
    newNode->cnt=a;
    newNode->next=NULL;
    if(H->h==NULL){
        H->h=newNode;
        return;
    }
    if(newNode->cnt < H->h->cnt){
        newNode->next=H->h;
        H->h=newNode;
        return;
    }
    Node *p;
    p=H->h;
    while(p->next!=NULL){
        if(newNode->cnt < p->next->cnt){
            break;
        }
        p=p->next;
    }
    if(p->next==NULL){
        p->next=newNode;
        return;
    }
    else{
        newNode->next=p->next;
        p->next=newNode;
        return;
    }
}

void search_adj(int y,int x){
    //printf("%d %d 방문\n",y,x);
    if(map[y][x]=='0' || visited[y][x]==1)return;
    visited[y][x]=1;
    cnt++;
    for(int i=0;i<4;i++){
        if((i==0 && y==N-1) || (i==1 && y==0) || (i==2 && x==N-1) ||(i==3 && x==0))continue;
        search_adj(y+dy[i],x+dx[i]);
    }
    return;
}

void print_Map(){
    printf("-----------------------------\n");
    printf("!지도를 출력합니다!\n");
    for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            printf("%c",map[i][j]);
        }
        printf("\n");
    }
    printf("-----------------------------\n");
}

void print_List(List *H){
    printf("%d\n",H->total);
    Node *horse;
    horse=H->h;
    while(horse){
        printf("%d\n",horse->cnt);
        horse=horse->next;
    }
    return;
}

int main(){
    List *H;
    H=creat_List();
    scanf("%d ",&N);
    map=(char **)malloc(sizeof(char*)*N); // map 이차원배열 동적할당
    for(int i=0;i<N;i++)map[i]=(char *)malloc(sizeof(char)*N);
    visited=(int **)malloc(sizeof(int*)*N); // visited 이차원배열 동적할당
    for(int i=0;i<N;i++)visited[i]=(int *)malloc(sizeof(int)*N);
    
    for(int i=0;i<N;i++){
            scanf("%s ",map[i]);
    }
   // print_Map();
    for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            if(map[i][j]!='0' && visited[i][j]==0){
                //printf("%d %d=%c갈거야\n",i,j,map[i][j]);
                search_adj(i,j);
            }
            if(cnt!=0)input_List(H,cnt);
            cnt=0;
        }
    }
    print_List(H);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#2021.03.29
//문제는 파악했고 공책에 끄적여보고오겠다.
#2021.03.30
//문제풀었고 시간없어서 내일 후기작ㄷ성!!
