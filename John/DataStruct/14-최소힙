---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#start_time : 2021.04.28
#end_ time : 2021.05.02
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#최소힙이란?
//최소값과 최대값을 쉽게 찾기위해 고안된 완전 이진트리
//자료 삽입과 출력이 항상 O(logN)의 시간복잡도를 가진다.
//부모노드는 항상 자식노드보다 작은 수를 갖는다.
//데이터를 삽입할때, 제일 끝 자리에 삽입후 부모와 비교후 삽입데이터가 작다면 교환해준다. 교환후에도 반복한다.
//데이터를 꺼낼때, 루트노드의 수를 꺼낸다. 그 후 제일 끝자리의 데이터를 루트노드에 삽입해준 후 자식노드와 비교후 자식노드보다 크다면 교환해준다. 교환후에도 반복한다.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#배운점
//어떤 것이 참일 때 그것이 먼저 참인지 확인후에 다음을 실행하는것이 당연하게 여겨왔는데
//오늘 Delete()에서 먼저 참이라고 가정후에 tempdata와 tempindex를 구한다음에 참인지 확인하는 신선한 방법을 알게되었다.
//굳이 그래야되나 싶기도한데 보면은 계속해서 조건문안에 조건문이 들어가면 복잡해보이기에 이 방법도 좋은것 같다.
//그리고 오늘 드디어 최소힙에 대해 배웠다.
//트리를 생성할때 항상 연결리스트만 써왔는데 선형리스트(배열)로 만든다고 생각하니 두려웠는데 생각보다 훨씬쉬웠고
//Delte()를 만들 때 젤 끝노드를 루트노드로 끌여들일때 총index를 줄이는 것을 깜빡하면 안되겠다.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#출력 (1~10을 역순으로 입력하고 10번 삭제해보았다.)

비어있음
1 2 5 4 3 9 6 10 7 8 
2 3 5 4 8 9 6 10 7 
3 4 5 7 8 9 6 10 
4 7 5 10 8 9 6 
5 7 6 10 8 9 
6 7 9 10 8 
7 8 9 10 
8 10 9 
9 10 
10 
비어있음
비어있음
//젤앞에 인덱스가 계속해서 제일 작은수가 들어오고 항상 부모노드가 자식노드보다 작은 것을 보니 최소힙이 성립한다.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#내코드
#include<stdio.h>
#include<stdlib.h>

#define Max 101

int heap[Max];
int index=0;
int cmp_index;

void swap(int a, int b){
    int temp;
    temp=heap[b];
    heap[b]=heap[a];
    heap[a]=temp;
    return ;
}

void insert(int data){
    int c;
    if(index>=Max){
        printf("꽉참\n");
        return;
    }
    if(index==0){
        heap[++index]=data;
        return;
    }
    heap[++index]=data;
    cmp_index=index;
    while(1){
        if(heap[cmp_index]<heap[cmp_index/2]){
            swap(cmp_index,cmp_index/2);
            cmp_index=cmp_index/2;
        }
        else break;
    }
}

int Delete(){
    if(index<=0){
        printf("비어있음\n");
        return;
    }
    int data=heap[1];
    heap[1]=heap[index];
    heap[index--]=0;
    cmp_index=1;
    int tempdata,tempindex;
    while(1){
        
        if(cmp_index*2<=index && heap[cmp_index*2+1]!=0){ // 자식이 두개 있을 경우, 완전이진트리이므로 오른쪽 자식만 0이아니면 두개가 증명됨
            if(heap[cmp_index*2]<=heap[cmp_index*2+1]){ // 자식중에 더작은 인덱스가 어디인지찾음
                tempdata=heap[cmp_index*2];
                tempindex=cmp_index*2;
            }
            else{
                tempdata=heap[cmp_index*2+1];
                tempindex=cmp_index*2+1;
            }
            if(heap[cmp_index]>tempdata){// 부모가 더 크다면 스위치 후 반복을위해 바꾼자리로 인덱스 이동
                swap(cmp_index,tempindex);
                cmp_index=tempindex;
            }
            else break; // 부모가 더작다면 최소힙 성립하므로 반복문 중지
        }
        else if(cmp_index*2<=index && heap[cmp_index*2]!=0){ // 자식이 한개 있을 경우
            if(heap[cmp_index]>heap[cmp_index*2]){
                swap(cmp_index, cmp_index*2);
                break; // 자식이 한개 였다는 것은 그 밑에는 더이상없으므로 반복문 종료
            }
            else break; // 부모가 더 작다면 최소힙 성립하므로 반복문 중지
        }
        else{ // 자식이 없을 경우
            break;
        }
    }
    return data;
}

void Print_Heap(){
    printf("\n");
    if(index<=0){
        printf("비어있음");
        return;
    }
    int i=1;
    while(heap[i]!=0){
        printf("%d ",heap[i]);
        i++;
    }
}

int main(){
    Print_Heap();
    for(int i=10;i>=1;i--){
        insert(i);
    }
    Print_Heap();
    for(int i=0;i<10;i++){
        Delete();
        Print_Heap();
    }
    Print_Heap();
    return 0;
}

