#start_time : 2021.03.16 12:12
#end_time :

#배운점
//unionfind 란 쉽게 말해 합집합찾기알고리즘이다.
//서로 다른 두노드를 선택했을 때 두 노드가 같은 그래프 안에 속하는지 확인하는 알고리즘이다.
//이걸 배우는 이유는 크루스칼 알고리즘 할때 트리를 생성할때 순환이 생기면 안되는데 그 역할을 할 수 있는 것이 unionfind이다.

#출력

#include <stdio.h>
#include <stdlib.h>

#define MaxVertex 10

typedef struct Node{
    int vertex;
    struct Node* link;
}Node;

typedef struct GrapeList{
    Node* adj[MaxVertex];
    int parent[MaxVertex];
    int vertexCnt;
}GrapeList;

GrapeList create_grape(){
    GrapeList *H=(GrapeList*)malloc(sizeof(GrapeList));
    for(int i=0;i<MaxVertex;i++){
        H->adj[i]=NULL;
    }
    for(int i=0;i<MaxVertex;i++){
        H->parent[i]=i;
    }
    H->vertexCnt=0;
}

int Find(GrapeList *H,int v){
    if(v==H->parent[v])return H->parent[v];
    else{
        return H->parent[v]=Find(H,H->parent[v]);
    }
}

void addvertex(GrapeList *H,int v){
    if(v>=MaxVertex){
        printf("!초과!\n");
        return;
    }
    else H->vertexCnt++;
}

void Union_(GrapeList *H,int v1,int v2){
    if(Find(H,v1)!=Find(H,v2)){
        Node* newNode=(Node*)malloc(sizeof(Node));
        newNode->vertex=v2;
        newNode->link=H->adj[v1];
        H->adj[v1]=newNode;
    
        Node* newNode2=(Node*)malloc(sizeof(Node));
        newNode2->vertex=v1;
        newNode2->link=H->adj[v2];
        H->adj[v2]=newNode2;
        
        if(v1<v2){
            H->parent[v2]=H->parent[v1];
        }
        else H->parent[v1]=H->parent[v2];
        return;
    }
    else{
        printf("싸이클이 생성되므로 제한합니다.\n");
        return;
    }
}
void print_Graph(GrapeList *H){
    Node *horse;
    for(int i=0;i<H->vertexCnt;i++){
        horse=H->adj[i];
        printf("정점[%d]->",i);
        while(horse!=NULL){
            printf("%d-> ",horse->vertex);
            horse=horse->link;
        }
        printf("\n");
    }
    return;
}

int main(){
    GrapeList *A=(GrapeList*)malloc(sizeof(GrapeList));
    for(int i=0;i<5;i++){
        addvertex(A,i);
    }
    print_Graph(A);
    Union_(A,0,1);
    Union_(A,1,2);
    Union_(A,0,2);
    return 0;
}
#2021.03.16
//26번째 줄을 보면 그래프에 parent라는 배열을 추가시켰다. 이 배열은 각 노드가 결과적으로 가르키는 부모노드가 누구인가를 가르킨다
//예를들어 parent[2]와 parent[3] 의 값이 둘다 1로 같다면은 둘은 같은 그래프에속하고 부모노드가 1이라는 것을 의미한다.
//노트에 좀 끄적여보고 와서 완성해보겠다.
#시도1(실패)
#출력
정점[0]->
정점[1]->
정점[2]->
정점[3]->
정점[4]->
싸이클이 생성되므로 제한합니다.
싸이클이 생성되므로 제한합니다.
싸이클이 생성되므로 제한합니다.

//현재의 코드로 해봤지만 (0,1) (1,2) (0,2)를하면 첫번째 두번째는 삽입되고 세번째만 싸이클생겼다는 경고문이떠야하는데 세번다 떴다. 이것은 내일 다시해보겠다.
