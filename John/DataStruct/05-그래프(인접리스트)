#start_time : 2021.03.10
#end_time : 2021.03.11

#배운점
//그래프를 리스트로 표현하는 법을 배웠다.
//장점 : 실제로 연결된 노드의 정보만 저장하기 때문에 메모리 절약이 가능하다(인접행렬의 경우, 연결돼있으면 1,안연결돼있으면 0이라는 정보를 모든정점이 가지고있다.)
//전체 노드를 탐색할때 연결된 간선의개수E 만큼만 돌아보면 된다. 따라서 전체 노드 탐색 시간복잡도는 O(E)이다. (인접행렬의 경우 노드가 V개라고하면은 graph[v][v]이므로 O(v*v)이다.)
//단점 : 정점 v1과 v2가 연결되어있는지 탐색하려면 리스트는 v1이라는정점에 가서 포인터가 NULL나올때까지 탐색해야된다 시간복잡도는 O()이다.(인접행렬의 경우 graph[v1][v2]가
//0인지 1인지 확인하면 되기때문에 시간복잡도는 o(1)이다.

#출력
정점[0]->1-> 3-> 
정점[1]->2-> 3-> 0-> 
정점[2]->3-> 1-> 
정점[3]->2-> 1-> 0-> 
![image](https://user-images.githubusercontent.com/79188587/111409520-72366900-871a-11eb-904e-6dbb07f6cf55.png)


#내코드

#include <stdio.h>
#include <stdlib.h>

#define Max_Vertex 30

typedef struct Node{
    int vertex;
    struct Node *next;
}Node;


typedef struct GraphList{
    Node *graph[Max_Vertex];
    int vertexCnt;
    int edgeCnt;
}GraphList;


GraphList* Create_Graph(){
    GraphList* Graph=(GraphList*)malloc(sizeof(GraphList));
    Graph->vertexCnt=0;
    for(int i=0;i<Max_Vertex;i++){
        Graph->graph[i]=NULL;
    }
    return Graph;
}

void addvertex(GraphList *H,int v){
    if(H->vertexCnt>=Max_Vertex){
        printf("정점개수 초과입니다.\n");
        return;
    }
    H->vertexCnt++;
}

void addedge(GraphList *H, int v1, int v2){
    if(v1>=H->vertexCnt || v2>=H->vertexCnt){
        printf("없는 정점입니다.\n");
        return;
    }
    Node *newNode=(Node*)malloc(sizeof(Node));
    newNode->vertex=v2;
    newNode->next=H->graph[v1];
    H->graph[v1]=newNode;
    
    Node *newNode2=(Node*)malloc(sizeof(Node));
    newNode2->vertex=v1;
    newNode2->next=H->graph[v2];
    H->graph[v2]=newNode2;
}

void print_Graph(GraphList *H){
    Node *horse;
    for(int i=0;i<H->vertexCnt;i++){
        horse=H->graph[i];
        printf("정점[%d]->",i);
        while(horse!=NULL){
            printf("%d-> ",horse->vertex);
            horse=horse->next;
        }
        printf("\n");
    }
    return;
}

int main(){
    GraphList *H=(GraphList*)malloc(sizeof(GraphList));
    H=Create_Graph(5,5);
    addvertex(H,0);
    addvertex(H,1);
    addvertex(H,2);
    addvertex(H,3);
    addedge(H,0,3);
    addedge(H,0,1);
    addedge(H,1,3);
    addedge(H,1,2);
    addedge(H,2,3);
    print_Graph(H);
    return 0;
}


