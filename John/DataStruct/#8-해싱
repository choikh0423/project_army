#해싱을 공부하기 위해 만든 것.

#start_time : 2021.03.03
#end_time : 2021.03.03

#배운점 : 해시테이블사용법, 오늘배운 것 기반으로 #7문제 풀이를 다시해보겠다.

#공부방법 : 유튜브에서 구현하는 것을 보며 유튜버보다 한박자빠르게 코딩하고 비교하는 방식으로 했다.

#내코드

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Node{
    int value;
    int key;
    struct Node *next;
}Node;

typedef struct buket{
    Node *head;
    int count;
}buket;

buket *hashtable=NULL;
int SIZE =7;

Node* createNode(int key,int value){
    Node* newnode=(Node *)malloc(sizeof(Node));
    newnode->key=key;
    newnode->value=value;
    newnode->next=NULL;
    return newnode;
}

int hashfuntion(int key){
    return key%SIZE;
}

void insert(int key, int value){
    int hashindex=hashfuntion(key);
    Node* newnode=createNode(key,value);
    //값이 없는 경우
    if(hashtable[hashindex].count==0){
        hashtable[hashindex].head=newnode;
        hashtable[hashindex].count=1;
        
    }
    else{
        newnode->next=hashtable[hashindex].head;
        hashtable[hashindex].head=newnode;
        hashtable[hashindex].count++;
    }
}

void Remove(int key){
    int hashindex= hashfuntion(key);
    
    Node* node;
    Node* trace;
    node=hashtable[hashindex].head;
    
    if(node==NULL){
        printf("\n no key found");
        return;
    }
    else{
        while(node!=NULL){
            if(node->key==key){
                if(node==hashtable[hashindex].head){
                    hashtable[hashindex].head=node->next;
                }
                else{
                    trace->next=node->next;
                }
                hashtable[hashindex].count--;
                free(node);
                break;
            }
            trace=node;
            node=node->next;
        }
    }
    return;
}

void search(int key){
    int hashindex=hashfuntion(key);
    Node* node=hashtable[hashindex].head;
    
    if(node==NULL){
        printf("\n없어");
    }
    else{
        while(node!=NULL){
            if(node->key==key){
                printf("key found key= [%d]value=[%d]",node->key,node->value);
                return;
            }
            node=node->next;
        }
    }
    printf("\n없어");
    return;
}

void display(){
    
    Node* horse;
    int i=0;
    for(i=0;i<SIZE;i++){
        horse=hashtable[i].head;
        printf("버켓[%d] :",i);
        while(horse!=NULL){
            printf("key:%d val:%d -> ",horse->key,horse->value);
            horse=horse->next;
        }
        
        printf("\n");
    }
    return;
}


int main() {
    hashtable=(buket*)malloc(sizeof(buket)*SIZE);
    
    insert(0,1);
    insert(1,10);
    insert(11,10);
    insert(21,14);
    insert(31,132);
    insert(6,5);
    insert(97,73);
    
    display();
}
