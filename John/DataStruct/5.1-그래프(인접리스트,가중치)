start_time : 2021.03.15 21:38
end_time : 2021.03.15 21:50

#배운점
//이제 '가중치 그래프'까지 구현했으므로 할 수있는 것은 '최소신장트리'를 구현할 수 있다.
//'최소신장트리'란 신장트리중에 최소의 코스트를 가지는 '신장트리'를 말한다.
//'신장트리'란 그래프에서 순환이 없고 모든 정점을 지나는 트리를 말한다.(여기서 간선E의 개수 deg(E)=n-1 이다.)
//사실 간선을 추가할 때 (0,1)라고 하면 0에서 1로가는 간선, 1에서0으로가는 간선 두개가 알아서 추가되게해놨지만, 따로따로 (0,1),(1,0)으로 하나씩 해주는 방법이 더 깔끔하다. 이유가 궁금하다면 물어보시길..

#출력(가중치는 괄호안)
정점[0]->1(1)-> 3(2)-> 
정점[1]->2(3)-> 3(4)-> 0(1)-> 
정점[2]->3(5)-> 1(3)-> 
정점[3]->2(5)-> 1(4)-> 0(2)-> 

#내코드
#include <stdio.h>
#include <stdlib.h>

#define Max_Vertex 30

typedef struct Node{
    int vertex;
    int weight;
    struct Node *next;
}Node;


typedef struct GraphList{
    Node *graph[Max_Vertex];
    int vertexCnt;
}GraphList;


GraphList* Create_Graph(){
    GraphList* Graph=(GraphList*)malloc(sizeof(GraphList));
    Graph->vertexCnt=0;
    for(int i=0;i<Max_Vertex;i++){
        Graph->graph[i]=NULL;
    }
    return Graph;
}

void addvertex(GraphList *H,int v){
    if(H->vertexCnt>=Max_Vertex){
        printf("정점개수 초과입니다.\n");
        return;
    }
    H->vertexCnt++;
}

void addedge(GraphList *H, int v1, int v2,int w){
    if(v1>=H->vertexCnt || v2>=H->vertexCnt){
        printf("없는 정점입니다.\n");
        return;
    }
    Node *newNode=(Node*)malloc(sizeof(Node));
    newNode->vertex=v2;
    newNode->weight=w;
    newNode->next=H->graph[v1];
    H->graph[v1]=newNode;
    
    Node *newNode2=(Node*)malloc(sizeof(Node));
    newNode2->vertex=v1;
    newNode2->weight=w;
    newNode2->next=H->graph[v2];
    H->graph[v2]=newNode2;
}

void print_Graph(GraphList *H){
    Node *horse;
    for(int i=0;i<H->vertexCnt;i++){
        horse=H->graph[i];
        printf("정점[%d]->",i);
        while(horse!=NULL){
            printf("%d(%d)-> ",horse->vertex,horse->weight);
            horse=horse->next;
        }
        printf("\n");
    }
    return;
}

int main(){
    GraphList *H=(GraphList*)malloc(sizeof(GraphList));
    H=Create_Graph(5,5);
    addvertex(H,0);
    addvertex(H,1);
    addvertex(H,2);
    addvertex(H,3);
    addedge(H,0,3,2);
    addedge(H,0,1,1);
    addedge(H,1,3,4);
    addedge(H,1,2,3);
    addedge(H,2,3,5);
    print_Graph(H);
    return 0;
}

#2021.03.15
//갑자기 가중치그래프를 구현하려는 이유는 다음에 배운 크루스칼 알고리즘에서는 가중치가 있는 그래프를 다루기 때문이다.
//이전에 구현한 인접리스트에 노드구조체에 가중치weight를 추가해준다.
//InsertEdge함수에 가중치 값도 추가할 수 있게해준다.
