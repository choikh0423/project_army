#start_time : 2021.03.06
#end_time : 2021.03.06

#Queue란?
First in-First out(FIFO)의 구조를 가지고 있으면 FRONT는 젤 앞 값을 가르키고 REAR는 젤 뒤 값을 가르킨다.
ENQUEUE()를 할경우 REAR뒤에 값을 붇여주고 REAR는 새값을 가르킨다.
DEQUEUE()를 할경우 FRONT에 있는 값을 빼오면서 삭제하고 FRONT는 바로 뒤에값을 가르킨다.



#배운점 
//연결리스트 큐 구현에 대해 배웠다. 
//연결리스트 큐를 구현한 이유는 선형리스트 큐는 메모리공간 생각을 해야되는 반면 연결리스트 큐는 그런면에서 생각안해도되서 더 자주쓸 것 같아서 이걸로 해봤다.
//큐에서 사용되는 front 와 rear의 역할에 대해 배웠다.

#include <stdio.h>
#include <stdlib.h>

typedef struct Node{
    int value;
    struct Node *next;
}Node;

typedef struct Que{
    Node *head;
    Node *front;
    Node *rear;
}Que;

Que *Q=NULL;

Node* create_node(int value){ //노드 생성
    Node *newNode=(Node*)malloc(sizeof(Node));
    newNode->value=value;
    newNode->next=NULL;
    return newNode;
}

void Enqueue(int value){//젤 뒤 노드에 붙여준다.
    Node *newNode=create_node(value);
    if(Q->front==NULL){
        Q->head=newNode;
        Q->front=newNode;
        Q->rear=newNode;
        return;
    }
    else{
        Q->rear->next=newNode;
        Q->rear=newNode;
        return;
    }
}
int Dequeue(){//젤앞노드것을 뺀다.
    if(Q->front==NULL){
        printf("아무것도 없습니다.\n");
        return -1;
    }
    int value;
    Node *old_front;
    old_front=Q->front;
    value=Q->front->value;
    Q->head=Q->head->next;
    Q->front=Q->front->next;
    free(old_front);
    return value;
}

int peak(){//젤 앞의 값을 보여줌
    if(Q->front==NULL){
        printf("아무것도 없습니다.\n");
    }
    return Q->front->value;
}

int main() {
    Q=(Que*)malloc(sizeof(Que));
    int n,k;
    scanf("%d",&n);
    for(int i=0;i<n;i++){
        scanf(" %d",&k);
        Enqueue(k);
    }
    printf("peak = %d\n",peak());
    for(int i=0;i<n;i++){
        printf("%d\n",Dequeue());
    }
    return 0;
}

#시도 1
//구현은 잘되서 다른사람들의 코드들과 비교를 해봤다.
//큐에 기본적으로 들어가야하는 front, rear 개념을 빼먹어버렸다 다시해보겠다.
//지금 내가짠 코드는 front, rear를 넣지않았지만 보면은 front, rear가 모두 첫노드를 가르키는 형식과 같다고 볼수 있다.
//하지만 queue는 front가 첫노드를 가르켜야하고 rear는 제일 뒷노드를 가르켜야한다.
//한마디로 선입선출 구조의 queue에서는 Enqueue()는 rear의 뒤에 새로운 데이터를추가, Dequeue()는 front에있는 데이터를 빼는것.
//다시 만들어보겠다.


#시도2
//front, rear를 넣고 만들어보았다.
//확실히 젤끝에 삽입할때 rear라는 포인터가 바로가르키고 있으니까 넣기 편하다.(평소에 연결리스트 사용할 때도 써먹을 수 있을 것 같기도하다.)
//큐 구현 끝!
