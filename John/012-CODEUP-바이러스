#문제설명 (https://codeup.kr/problem.php?id=4503)
신종 바이러스인 웜 바이러스는 네트워크를 통해 전파된다. 한 컴퓨터가 웜 바이러스에 걸리면 그 컴퓨터와 네트워크 상에서 연결되어 있는 모든 컴퓨터는 웜 바이러스에 걸리게 된다.
예를 들어 7대의 컴퓨터가 <그림 1>과 같이 네트워크 상에서 연결되어 있다고 하자. 1번 컴퓨터가 웜 바이러스에 걸리면 웜 바이러스는 2번과 5번 컴퓨터를 거쳐 3번과 6번 컴퓨터까지 전파되어 2, 3, 5, 6 네 대의 컴퓨터는 웜 바이러스에 걸리게 된다. 하지만 4번과 7번 컴퓨터는 1번 컴퓨터와 네트워크상에서 연결되어 있지 않기 때문에 영향을 받지 않는다.
https://codeup.kr/upload/201304/image/virus.png
어느 날 1번 컴퓨터가 웜 바이러스에 걸렸다. 컴퓨터의 수와 네트워크 상에서 서로 연결되어 있는 정보가 주어질 때, 1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 출력하는 프로그램을 작성하시오.

입력
첫째 줄에는 컴퓨터의 수가 주어진다. 컴퓨터의 수는 100 이하이고 각 컴퓨터에는 1번 부터 차례대로 번호가 매겨진다.
둘째 줄에는 네트워크 상에서 직접 연결되어 있는 컴퓨터 쌍의 수가 주어진다.
이어서 그 수만큼 한 줄에 한 쌍씩 네트워크 상에서 직접 연결되어 있는 컴퓨터의 번호 쌍이 주어진다.

출력
1번 컴퓨터가 웜 바이러스에 걸렸을 때, 1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 첫째 줄에 출력한다.

입력 예시   
7
6
1 2
2 3
1 5
5 2
5 6
4 7

출력 예시
4

#start_time : 2021.03.19 12:24
#end_time : 

#배운 점

#include<stdio.h>
#include<stdlib.h>

#define MaxVertex 100

typedef struct Node{
    int vertex;
    struct Node *next;
}Node;

typedef struct GraphList{
    Node* adj[MaxVertex];
    int vertexCnt;
    int visited[MaxVertex];
}GraphList;

typedef struct Queue{
    Node *head;
    Node *front;
    Node *rear;
}Queue;

Queue *Q;
GraphList *H;
int virus_cnt=0;

Queue* create_Queue(){
    Queue* Q=(Queue*)malloc(sizeof(Queue));
    Q->head=NULL;
    Q->front=NULL;
    Q->rear=NULL;
    return Q;
}

GraphList* Create_Graph(){
    GraphList *H=(GraphList*)malloc(sizeof(GraphList));
    H->vertexCnt=0;
    for(int i=0;i<MaxVertex;i++){
        H->adj[i]=NULL;
    }
    return H;
}

void Enqueue(int v){
    Node *newNode=(Node*)malloc(sizeof(Node));
    newNode->vertex=v;
    newNode->next=NULL;
    if(Q->head==NULL){
        Q->head=newNode;
        Q->front=newNode;
        Q->rear=newNode;
        return;
    }
    else{
        Q->rear->next=newNode;
        Q->rear=newNode;
        return;
    }
}


int Dequeue(){//젤앞노드것을 뺀다.
    if(Q->front==NULL){
        printf("아무것도 없습니다.\n");
        return -1;
    }
    int value;
    Node *old_front;
    old_front=Q->front;
    value=Q->front->vertex;
    Q->head=Q->head->next;
    Q->front=Q->front->next;
    free(old_front);
    return value;
}
void addvertex(int v){
    if(v>MaxVertex){
        printf("!overflow!\n");
        return;
    }
    H->vertexCnt++;
}

void addedge(int v1,int v2){
    if(v1>H->vertexCnt || v2>H->vertexCnt){
        printf("존재하지않는 정점입니다.\n");
        return;
    }
    Node *newNode=(Node*)malloc(sizeof(Node));
    newNode->vertex=v2;
    newNode->next=H->adj[v1];
    H->adj[v1]=newNode;
    
    Node *newNode2=(Node*)malloc(sizeof(Node));
    newNode2->vertex=v1;
    newNode2->next=H->adj[v2];
    H->adj[v2]=newNode2;
    
    return;
}

void print_graph(){
    Node *horse;
    for(int i=1;i<=H->vertexCnt;i++){
        horse=H->adj[i];
        printf("정점[%d] -> ",i);
        while(horse){
            printf("%d -> ",horse->vertex);
            horse=horse->next;
        }
        printf("\n");
    }
}

void BFS(int v){//BFS
  
  Node *w;
  H->visited[v]=1;
  Enqueue(v);
  //printf("%d ",v);
  while(Q->front!=NULL){
      v=Dequeue();
      w=H->adj[v];
      while(w){
          if(H->visited[w->vertex]==0){
              //printf("%d ",w->vertex);
              virus_cnt++;
              H->visited[w->vertex]=1;
              Enqueue(w->vertex);
              w=w->next;
          }
          else w=w->next;
      }
  }
}
void printQue(){
    Node *horse;
    horse=Q->head;
    while(horse){
        printf("%d->",horse->vertex);
        horse=horse->next;
    }
}

int main(){
    int m,n;
    int v1,v2;
    H=Create_Graph();
    Q=create_Queue();
    scanf("%d %d ",&m,&n);
    for(int i=0;i<m;i++){
        addvertex(i);
    }
    for(int i=0;i<n;i++){
        scanf("%d %d ",&v1,&v2);
        addedge(v1,v2);
    }
    //print_graph();
    BFS(1);
    printf("%d",virus_cnt);
    return 0;
}


#2021.03.19
//옛날에 썼던 코드를 들고와서 쓸수도 있었지만, 그래프 만드는 감각이 익숙해지기 위해 그냥 처음부터 다 코딩했다.
//그래프 생성, 정점 삽입, 간선 삽입, 그래프프린트 까지 만들었고 실질적인 알고리즘은 조금 이따가 다시 와서 만들겠다.
//다 만들었고 문제에서 준 케이스는 제대로 출려되는데 문제사이트에 코드제출하면 '세그멘테이션 폴트'가 뜬다.
//내일 100가지 넣었을때의 경우를 실험해보겠다.
//방금 살짝해봤는데 100가지 넣었고 간선99개 일때 세그멘테이션 폴트떴다. 내일 진짜로 완성하겠다.
