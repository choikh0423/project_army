#문제 https://codeup.kr/problem.php?id=4060
문제 분류 : DFS/BFS
문제 설명    

길동이는 아래 그림과 같이 M×N 개인 전광판 위에 놓여있는 켜져있는 전구(흰색)와 꺼져 있는 전구(검은색)들을 가지고 실험을 한다.
https://codeup.kr/upload/201508/2015t51.jpg
임의의 전구X에 대해서 상, 하, 좌, 우로 인접한 4개의 전구들을 X의 이웃이라고 한다.
길동이는 위의 전구들 중에서 하나를 선택해서 전구를 켜거나 끌 수 있다.
그러면 이 전구의 이웃이고 같은 상태로 있는 전구들도 상태가 바뀐다.
계속해서 반복적으로 상태가 바뀐 전구의 이웃들 또한 같은 상태로 바뀐다.
예를 들어, 위의 그림에서 전구1번을 켜면 'ㄷ'자 모양의 꺼진 전구들은 모두 켜지므로 아래의 그림과 같이 된다
https://codeup.kr/upload/201508/2015t52.jpg
그런 다음 전구3을 켜면 아래와 같이 된다.
https://codeup.kr/upload/201508/2015t53.jpg

그리고 전구6을 켜고, 마지막으로 전구5를 켜면 모든 전구는 켜진 상태가 된다.
따라서 4번의 조작으로 모든 전구가 켜진다.
같은 방법으로 처음 상태에서 전구2와 전구4를 끄는 두 번의 조작으로 모든 전구가 꺼진 상태로 바꿀 수 있다.
켜져 있거나 꺼져 있는 전구들을 조작하여 모두 켜진 상태가 되도록 하는 최소 조작횟수와 모든 꺼진 상태로 되도록 하는 최소조작횟수를 찾는 프로그램을 작성하라
추가 설명) 끄는 동작을 할때에는 스위치를 계속 끄고, 켜는 동작을 할 때에는 계속 켤 때의 최소 조작 횟수입니다.

입력
첫째 줄에 전광판의 크기를 나타내는 세로 길이 M과 가로 길이 N이 입력된다. (2<=M,N<=100인 자연수)
둘째줄 부터 M줄에 걸쳐 N열 만큼의 전구들의 상태가 주어진다. 이때 켜진 상태는 1, 꺼진 상태는 0으로 입력된다.

출력
모든 전구를 켜기 위한 최소 조작횟수와 모두 끄기 위한 최소조작횟수를 각각 공백으로 구분하여 출력하라.

입력 예시   
5 6
0 0 1 0 1 1 
0 1 1 0 0 0 
0 0 1 0 0 0 
1 1 1 1 1 1 
0 0 0 1 0 0 

출력 예시
4 2

#start_time : 21.03.17
#end_time : 21.03.18

#배운점
//dfs 와 bfs 는 그래프에서만 쓰는 것이 아니라 개념일뿐이다.
//이차원 배열 동적할당 하는법을 배웠다.
//좌표체계에서 이동방식을 배운 것 같다. ex)dx[4]={1,-1,0,0}
//재귀함수를 써봤는데 재귀함수 쪽을 좀더 공부할 필요가있어보인다.
//너무 어려웠다..아직 부족한 것 같다

#내코드

#include<stdio.h>
#include<stdlib.h>

#define True 1
#define False 0

int **visited;
int **array;
int n,m;
int dy[4]={0,0,1,-1}; //y가 열
int dx[4]={1,-1,0,0}; //x가 행


void On(int x, int y){
    if(array[x][y]==1 || visited[x][y]==True)return; // 이미꺼져 있거나 방문했다면 무시하고 이전 배열로 돌아가라.
    //printf("들어옴\n");
    visited[x][y]=True; // 방문 했다고 표시.
    for(int i=0;i<4;i++){
        
        if((i==1 && x==0) || (i==2 && y==n-1) || (i==3 && y==0) ||(i==0 && x==m-1)) continue; // 인덱스가 -1이 되거나 최대보다 커질경우 넘어가라.
        else if(array[x+dx[i]][y+dy[i]]==0){ // 인접 배열이 꺼져있다면 그애도 켜라
          On(x+dx[i],y+dy[i]); //
        }
    }
    
}

void Off(int x, int y){
    if(array[x][y]==0 || visited[x][y]==True)return;
    //printf("들어옴\n");
    visited[x][y]=True;
    for(int i=0;i<4;i++){
        
        if((i==1 && x==0) || (i==2 && y==n-1) || (i==3 && y==0) ||(i==0 && x==m-1)) continue;
        else if(array[x+dx[i]][y+dy[i]]==1){
          Off(x+dx[i],y+dy[i]);
        }
    }
    
}

int main(){
    int on_cnt=0,off_cnt=0;
    scanf("%d %d ", &m, &n);
    array=(int**)malloc(sizeof(int*)*m);
    for(int i=0;i<m;i++){
        array[i]=(int*)malloc(sizeof(int)*n); //2차원 배열 동적할당
    }
    visited=(int**)malloc(sizeof(int*)*m);
    for(int i=0;i<m;i++){
        visited[i]=(int*)malloc(sizeof(int)*n);
    }
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            scanf("%d ",&array[i][j]);    
        }
    }
     for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(array[i][j]==0 && visited[i][j]==False){ //  꺼져있고 방문안했으면 켜라
                On(i,j);
                on_cnt++;
            }
            else if(array[i][j]==1 && visited[i][j]==False){ // 켜져있고 방문안했으면 꺼라
                Off(i,j);
                off_cnt++;
            }
        }
    }
    printf("%d %d ",on_cnt,off_cnt);
    return 0;
}



#2021.03.17
//일단은 입력을 받는 것부터 만들었다.
//이차원배열 동적할당하는법을 배웠다,
//출력까지 똑같이 잘나온다.

#2021.03.18(성공!!)
//dfs bfs를 배울때 그래프를 사용했다보니까 꼭 그래프를 써야한다는 강박관념에 사로잡혀있었다.
//dfs bfs는 개념일 뿐이다 저기 있는 이차원 배열자체를 dfs할 생각을 해봤다.
