문제 설명    
진짜 오랜만에 주현이 엄마는 기억력 테스트를 하기로 했다.

주현이가 많이 컸기 때문에 이제 숫자만 가지고 테스트하기엔 부족하다.

이번에도 N개의 숫자를 불러주고, M개의 질문을 한다.

처음에 [단어]와 [숫자]를 불러주고, 질문으로 [단어]를 물어보면 해당 단어의 [숫자]를 말하는 것이다.

그런데 불러 줄 때 같은 [단어]가 나오는 경우 [이전 단어]의 [숫자]에 [현재 숫자]를 더해야 한다.

예를 들어 "ddobot 3" , "poketmon 5", "ddobot 7"을 불러 주고, 질문으로 "ddobot"을 물었을 경우 3+7인 10을 답해야 한다.

이번에는 포켓몬 썬&문  카드 풀 팩이 걸려 있다. 주현이가 잘 할 수 있도록 도와주자.

입력
첫째 줄에 N과 M이 입력된다.(1<=N,M<=100,000)

둘째 줄부터 N줄 동안 문자열 S와 정수 k가 입력된다. 

그 다음 M줄 동안 질문 Q가 문자열로 입력된다. 만약 부르지 않았던 단어를 질문하는 경우 0을 출력한다.

(S, Q는 100글자 이하 영어 소문자 알파벳으로만 구성, k는 10이하의 자연수)

출력
질문에 맞는 [누적 숫자]를 한줄에 하나씩 출력한다.

입력 예시   
3 4
ddobot 3
poketmon 5
ddobot 7
ddobot
poketmon
ddobot
hellocarbot

출력 예시
10
5
10
0

#start_time : 2021.02.28
#end time : 2021.03.05

#배운점 : 해싱, string함수 사용법
#궁금한점 : 해시테이블 사이즈에 관해 궁금증이생겼다. 이 문제에서 어느정도 size가 제일 시간낭비가 없는지 궁금하다. 너무 작으면 체이닝이 길어지니까 탐색에서 오래걸리고 너무 크면 인덱스 하나하나 조사하는데 오래걸리고. 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Node{
    char data[100];
    int number;
    struct Node* next;
}Node;

typedef struct HashTable{
    Node *head;
    int count;
}HashTable;

int size=103;
HashTable* hashTable=NULL;

Node* Creat_node(char data[],int number){
    Node *newNode=(Node*)malloc(sizeof(Node));
    strcpy(newNode->data,data);
    newNode->number=number;
    newNode->next=NULL;
    return newNode;
}

int convert_s(char a[]){
    int sum=0;
    for(int i=0;a[i]!=0;i++){
        sum=sum+(int)a[i];
    }
    return sum;
}

int Hashfuntion(char a[],int size){
    int key;
    key=convert_s(a);
    key=key%size;
    return key;
}

void InsertHash(char a[],int num,int size){
    Node *p;
    int hashIndex;
    Node *newNode=Creat_node(a,num);
    hashIndex=Hashfuntion(a,size);
    //printf("index=%d\n",hashIndex);
    p=hashTable[hashIndex].head;
    if(p==NULL){
        hashTable[hashIndex].head=newNode;
        //printf("hashIndex=%d들어옴\n",hashIndex);
        return;
    }
    else{
        while(p->next!=NULL && strcmp(p->data,a)!=0){
            p=p->next;
        }
        if(strcmp(p->data,a)==0){
            p->number=p->number+num;
        }
        else{
            newNode->next=NULL;
            p->next=newNode;
            return;
        }
    }
}

void display(){
    Node* horse;
    int i=0;
    for(i=0;i<size;i++){
        horse=hashTable[i].head;
        printf("버켓[%d] :",i);
        while(horse!=NULL){
            printf("key:%d data :%s val:%d -> ",i,horse->data,horse->number);
            horse=horse->next;
        }
        printf("\n");
    }
    return;
}

void Int_print(char a[]){
    Node* horse;
    int i=0;
    for(i=0;i<size;i++){
        horse=hashTable[i].head;
        while(horse!=NULL){
            if(strcmp(horse->data,a)==0){
                printf("%d\n",horse->number);
                return;
            }
            horse=horse->next;
        }
    }
    printf("0\n");
    return;
}
int main() {
    int n,m;
    char name[100];
    int num;
    hashTable=(HashTable*)malloc(sizeof(HashTable)*size);
    scanf("%d %d",&n,&m);
    //display();
    //printf("\n*--------------------------------------*\n");
    for(int i=0;i<n;i++){
        scanf(" %s %d",name,&num);
        InsertHash(name,num,size);
    }
    //display();
    for(int i=0;i<m;i++){
        scanf("%s",name);
        Int_print(name);
    }
    
}
#2021.02.28
//이문제랑 제일 잘맞는 자료구조는 해시라고생각한다. 그래서 오늘부터 해시공부하고 풀도록하겠다.

#2021.03.01
//H->node[k]=n;
//error: incompatible types when assigning to type ‘Node’ from type ‘Node *
//위코드에서 이러한 에러가뜬다 분명 node는 Node를 가르키는 포인터Node*이고 n도 Node*타입인데도 불구하고 호환되지않는다고 하고 node[k]가 포인터형이 아니라고한다..

#2021.03.02
//오늘 너무피곤해서 그래도 조금은 와서 다른사람들은 어떻게 구현했는지 봤지만 아직 문제원인을 모르겠다.

#2021.03.04
//일단 입력하는 것까지 구현했고 오늘따라 바빠서 내일 진짜로 완성하겠다.
//확실히 기본적인 해싱공부후에 구현하니까 편해졌다

#시도1
//Segmentation fault 오류떴다 내일 수정해보겠다.

#2021.03.05
#시도2(성공)
//내 코드에서 반례는 ab라는 문자열과 ba라는 문자열이 들어왔을 때 였다.
//ab와 ba는 hashfuntion을 지나오면 같은 키값을 가진다 이 때에 해시테이블에 넣는 것을 주의하면 될것이다.
// (_이전코드_)
   while(p!=NULL && strcmp(p->data,a)!=0){ //<-여기서 반복문이 끝날때는 p==NULL이되거나 두 문자열이 같을때이다 
            p=p->next;
        }
        if( strcmp(p->data,a)==0){ //<-위에서 p==NULL이라서 반복문이 끝낫다면은 여기있는 p->data라는 접근에서 오류가 나게된다.
            p->number=p->number+num;
            return;
        }
        else{
            newNode->next=p; //<-p==NULL이 되서 반복문이 끝났다면 여기서 마지막 노드에 붙여줘야되는데 이미 포인터p는 널을가르키고 더이상 지나온 노드를 가르킬수없다.
            p->next=newNode;
        }
//그래서 애초에 반복문에서 p->next!=NULL로 바꿔야 else문에서 마지막 노드뒤에 newNode를 붙일 수 있다.
//그리고 이렇게해야 if문에서 p->data에서 세그먼테이션 오류가 안뜰것이다.
