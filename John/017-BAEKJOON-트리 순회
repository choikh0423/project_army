#문제
이진 트리를 입력받아 전위 순회(preorder traversal), 중위 순회(inorder traversal), 후위 순회(postorder traversal)한 결과를 출력하는 프로그램을 작성하시오.

예를 들어 위와 같은 이진 트리가 입력되면,

전위 순회한 결과 : ABDCEFG // (루트) (왼쪽 자식) (오른쪽 자식)
중위 순회한 결과 : DBAECFG // (왼쪽 자식) (루트) (오른쪽 자식)
후위 순회한 결과 : DBEGFCA // (왼쪽 자식) (오른쪽 자식) (루트)
가 된다.

#입력
첫째 줄에는 이진 트리의 노드의 개수 N(1≤N≤26)이 주어진다. 둘째 줄부터 N개의 줄에 걸쳐 각 노드와 그의 왼쪽 자식 노드, 오른쪽 자식 노드가 주어진다. 노드의 이름은 A부터 차례대로 영문자 대문자로 매겨지며, 항상 A가 루트 노드가 된다. 자식 노드가 없는 경우에는 .으로 표현된다.

#출력
첫째 줄에 전위 순회, 둘째 줄에 중위 순회, 셋째 줄에 후위 순회한 결과를 출력한다. 각 줄에 N개의 알파벳을 공백 없이 출력하면 된다.
----------------------------------------------------------------------------------------------------------------------------------------------------------
예제 입력 1 
7
A B C
B D .
C E F
E . .
F . G
D . .
G . .

예제 출력 1 
ABDCEFG
DBAECFG
DBEGFCA
----------------------------------------------------------------------------------------------------------------------------------------------------------
#배운점
//이중포인터에 대해 다시 복습하게 되는 시간이였다.
//if(node==NULL)대신 if(ndoe)하면 더 깔끔하다.
------------------------------------------------------------------------------------------------------------------------------------
#내코드
#include <stdio.h>
#include <stdlib.h>

#define Max 27

typedef struct Node{
  int data;
  struct Node* left;
  struct Node* right;
}Node;

typedef struct BT{
  Node *h;
  Node **Array;
  int cnt;
}BT;

BT *tree;

void insert_tree(char a,char b,char c){
  tree->Array[a-64]->left=tree->Array[b-64];
  tree->Array[a-64]->right=tree->Array[c-64];
  return;
}

void preorder(Node *node){
    if(node==NULL)return;
    printf("%c",(node->data+64));
    preorder(node->left);
    preorder(node->right);
    return;
}

void inorder(Node* node){
  if(node){
    inorder(node->left);
    printf("%c",(node->data+64));
    inorder(node->right);
    return;
    }
}
void postorder(Node* node){
    if(node){
        postorder(node->left);
        postorder(node->right);
        printf("%c",node->data+64);
    }
}

int main(void) {
  int N;
  char a[3];
  tree=(BT*)malloc(sizeof(BT));
  scanf("%d ",&N);
  tree->cnt=N;
  tree->Array=(Node**)malloc(sizeof(Node*)*(N+1));
  for(int i=1;i<=N;i++){
    tree->Array[i]=(Node*)malloc(sizeof(Node));
  }
  
  for(int i=1;i<=N;i++){
    tree->Array[i]->data=i;
    tree->Array[i]->left=NULL;
    tree->Array[i]->right=NULL;
  }
  for(int i=1;i<=N;i++){
    scanf("%c %c %c ",&a[0], &a[1], &a[2]);
    insert_tree(a[0],a[1],a[2]);
  }
  preorder(tree->Array[1]);
  printf("\n");
  inorder(tree->Array[1]);
  printf("\n");
  postorder(tree->Array[1]);
}
