# 시작시간: 19:52
# 종료시간: ---
# 날짜: 21.02.26

# 문제: 이미 소팅되어 있는 두개의 int 리스트 합병정렬하기
Ex.
[1,3,5], [2,4,6] -> [1,2,3,4,5,6]

# 1차 시도 - O(2n) --> though this is amortized cost, not considering the worst case for append
def merge_lists(my_list, alices_list):

    # Combine the sorted lists into one large sorted list
    
    # Initialization
    merged_list = []
    count = 0
    my_count = 0
    alice_count = 0
    
    # Merging
    while count < len(my_list) + len(alices_list):
        # Edge Cases
        # If my_list or alices_list is empty or fully used
        if len(my_list) == 0 or my_count == len(my_list):
            merged_list.append(alices_list[alice_count])
            alice_count += 1
        elif len(alices_list) == 0 or alice_count == len(alices_list):
            merged_list.append(my_list[my_count])
            my_count += 1
        # Else Compare the elements in each list
        else:
            if my_list[my_count] >= alices_list[alice_count]:
                merged_list.append(alices_list[alice_count])
                alice_count += 1
            else:
                merged_list.append(my_list[my_count]) 
                my_count += 1
        
        count += 1


    return merged_list

## Merge Sorting 알고리즘을 쓰려다가 recursion(재귀함수)을 사용하지 않아도 될 것 같아서 while loop 씌우고 해보았음.
    ㄴ 안쓰는게 당연하구나. merging만 하면되는데 굳이 merge sort를 할 필요가 없지. 이미 sorting이 되어있는데. 기계적으로 생각하지말자.

# 2차 시도 - 더 간결한 답 커밍쑨

