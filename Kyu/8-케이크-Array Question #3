# 시작시간: 16:30
# 종료시간: ---
# 날짜: 21.02.24 - 21.02.25

문제: 문자열내에 있는 단어들만 바꿔주기
['t','h','e',' ','w','o','r','l','d'] -> ['w','o','r','l','d',' ','t','h','e']

# 1차 시도
처음 생각한 방안은 각 단어들을 문자로 생각하여 reverse하는 것이다. 단어들만.
Ex. ['t','h','e',' ','w','o','r','l','d']
문제점:
- 각 단어의 길이가 달라서 in-place로 문자들을 바꾸게 되면 메시지 자체가 파괴된다.
   - ['r','l','d',' ','w','o','t','h','e'] 이런식으로
- 그래서 내가 생각한건 ['a',' ','b'] 를 바꾸면 ['b',' ','a']가 되듯이 각 단어들을 문자 하나 꼴로 
  바꿔주면안될까 했지만 모든 문자들을 다 쪼개고 다시 병합하는 과정이 복잡할 것이라고 생각하였음.

# 2차 시도 - O(n^2)
1) 문자열자체를 거꾸로 만든다.
2) 단어들만 다시 거꾸로 해준다.

def reverse_words(message):
    # Decode the message by reversing the words
    
    # Reverse the whole message - 문자열 거꾸로 만들기
    reverse(message, 0, len(message)-1)
    
    # Back-reverse each word - 각 단어 거꾸로 만들기
    word_start = 0
    for j in range(len(message)):
        if message[j]== ' ':
            word_end = j - 1
            reverse(message, word_start, word_end)
            word_start = j + 1
        
        # End-Case - 단어가 하나이거나 끝단어 거꾸로 만들어주기
        if j == len(message)-1:
            reverse(message, word_start, j)
    pass

# In-place reverse function
def reverse(message, start, end):
    while start < end:
        message[start], message[end] = message[end], message[start]
        start += 1
        end -= 1
        
        
# Reverse 함수 자체를 바꿔야했음. 기존의 Array Question #2에서 쓴 reverse 함수는 무조건 전체 문자열을 넣는것을 요구했음.
  하지만 이번 reverse 함수는 start, end input을 받아서 어디서부터 어디까지만 reverse하면 되는지 명시 가능
# 첫번째 reverse: O(n)
  for loop 안의 reverse: ~(O(n^2))
  Therefore, O(n^2)
# 신기하게도 교과서 답이랑 흡사함.
