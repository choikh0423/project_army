  
# 시작시간: ---
# 종료시간: ---
# 날짜: 21.03.07 - 21.03.09

문제: 


# 1차 시도 및 답안지 참고
def can_two_movies_fill_flight(movie_lengths, flight_length):

    # Converting movie_lengths list as set
    seen_movie_set = set()
    
    for first_movie_length in movie_lengths:
   
        second_movie_length = flight_length - first_movie_length
        
        if second_movie_length in seen_movie_set:
            return True
        seen_movie_set.add(first_movie_length)
            
    
    return False
    
    
 # 이 문제는 여러방면에서 참고할만 하다:
   - 나는 본 영화가 없는 set를 만들어내기 위해 애먹었지만 답안지는 본 영화들을 모아놓음으로써 그 문제를 해결했다. 본 영화들을 한 set에 모아놓고 아직 보지않은 영화와 비교하면 같은 영화가
     두번 들어갈 것을 걱정하지 않아도 된다.
   - 접근방식이 인상적이다. O(n^2)인 Brute Force Comparison으로 시작해서 Binary Search를 건너서 Hash로 온다. 이렇듯 단계별 효율성을 생각해볼줄 알아야하는 것 같다.
   - 비행 시간과 첫 영화의 시간차를 사용하는 것도 좋은 아이디어였다. 이렇게되면 무조건 두개의 영화를 요구하게 되며 비행 시간이 너무 짧을 경우를 배제한다. 알아서 negative value를 줌으로써
     없애버리기 때문이다.

# 3.9 시간이 없어서 공책에다가 문제풀고 복습할 것 이다.

# 3.10 오늘도 여러모로 시간이 훅 가버려서 공책으로 다 풀어서 내일 2시간동안 다 고치고 복습하고 올리는 작업을 할 것 임.
     
# 3.12 공책에 하는 마지막날 내일은 무조건 사지방 간다.

(구) 답:
    # Determine if two movie runtimes add up to the flight length
    movie_lengths_seen = set()
    
    for first_movie_length in movie_lengths:
        matching_second_movie_length = flight_length - first_movie_length
        if matching_second_movie_length in movie_lengths_seen:
            print(movie_lengths_seen)
            return True
        movie_lengths_seen.add(first_movie_length)
    
    return False



# Brute force answer

    # for i in range(len(movie_lengths)):
    #     second_movie_length = flight_length - movie_lengths[i]
    #     for j in range(len(movie_lengths)):
    #         if j != i and (movie_lengths[j]==second_movie_length):
    #             return True
                
    # return False


# Binary Search answer (incomplete)
# def binary_search(target, nums):
#     floor_index = -1
#     ceiling_index = len(nums)
    
#     while floor_index + 1 < ceiling_index:
#         distance = ceiling_index - floor_index
#         half_distance = distance // 2
#         guess_index = floor_index + half_distance
        
#         guess_value = nums[guess_index]
        
#         if guess_value == target:
#             return True
            
#         elif guess_value > target:
#             ceiling_index = guess_index
            
#         else:
#             floor_index = guess_index
            
#     return False

    # for i in movie_lengths:
    #     target_length = flight_length - i
    #     binary_search(target_length, movie_lengths)
